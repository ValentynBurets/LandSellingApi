// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace Data.Migrations
{
    [DbContext(typeof(LandSellingContext))]
    [Migration("20220214115518_FinalDBUpadatePriceCoefMigration")]
    partial class FinalDBUpadatePriceCoefMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entity.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Entity.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BidderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<Guid>("SellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BidderId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SellingId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entity.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LotId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.HasIndex("LotId1");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Domain.Entity.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Entity.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Geometry>("Location")
                        .HasColumnType("geography");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("Domain.Entity.PriceCoef", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DaysCount")
                        .HasColumnType("int");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.ToTable("PriceCoefs");
                });

            modelBuilder.Entity("Domain.Entity.RealEstate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Square")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LotId")
                        .IsUnique();

                    b.ToTable("RealEstates");
                });

            modelBuilder.Entity("Domain.Entity.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceCoefId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PriceCoefId")
                        .IsUnique();

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("Domain.Entity.Selling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LotId")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.ToTable("Sellings");
                });

            modelBuilder.Entity("Domain.Entity.Users.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("YearsOfExperience")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Domain.Entity.Bid", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Bidder")
                        .WithMany("Bids")
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Selling", "Selling")
                        .WithMany("Bids")
                        .HasForeignKey("SellingId")
                        .IsRequired();

                    b.Navigation("Bidder");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("Domain.Entity.Favorite", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Customer", null)
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Lot", null)
                        .WithMany("Favorites")
                        .HasForeignKey("LotId1");

                    b.Navigation("Customer");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Domain.Entity.Image", b =>
                {
                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithMany("Images")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Domain.Entity.Lot", b =>
                {
                    b.HasOne("Domain.Entity.Users.Manager", "Manager")
                        .WithMany("Lots")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Customer", "Owner")
                        .WithMany("Lots")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entity.PriceCoef", b =>
                {
                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithMany("PriceCoefs")
                        .HasForeignKey("LotId");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Domain.Entity.RealEstate", b =>
                {
                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithOne("RealEstate")
                        .HasForeignKey("Domain.Entity.RealEstate", "LotId");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Domain.Entity.Rent", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("Rents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithMany("Rents")
                        .HasForeignKey("LotId")
                        .IsRequired();

                    b.HasOne("Domain.Entity.Users.Manager", "Manager")
                        .WithMany("Rents")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.PriceCoef", "PriceCoef")
                        .WithOne("Rent")
                        .HasForeignKey("Domain.Entity.Rent", "PriceCoefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Lot");

                    b.Navigation("Manager");

                    b.Navigation("PriceCoef");
                });

            modelBuilder.Entity("Domain.Entity.Selling", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("Sellings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithOne("Selling")
                        .HasForeignKey("Domain.Entity.Selling", "LotId")
                        .IsRequired();

                    b.HasOne("Domain.Entity.Users.Manager", "Manager")
                        .WithMany("Sellings")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Customer");

                    b.Navigation("Lot");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Domain.Entity.Customer", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Favorites");

                    b.Navigation("Lots");

                    b.Navigation("Rents");

                    b.Navigation("Sellings");
                });

            modelBuilder.Entity("Domain.Entity.Lot", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("PriceCoefs");

                    b.Navigation("RealEstate");

                    b.Navigation("Rents");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("Domain.Entity.PriceCoef", b =>
                {
                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Domain.Entity.Selling", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("Domain.Entity.Users.Manager", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("Rents");

                    b.Navigation("Sellings");
                });
#pragma warning restore 612, 618
        }
    }
}
